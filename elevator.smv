-- MAIN Module
MODULE main
	VAR
		--The state of the elevator car
		car: {still, moving};
		--The state of the elevator door
		door: {open, closed};
		--The destination where elevator will move to serve a request
		dest: {none, up1, up2, down2, down3};
		--Position of the elevator car
		elev: 1..3;
		--To remember what direction the elevator was moving once it stops
		mode: {goingUp, goingDown};

		-- How long will the elevator door be open?
		timer : 1..3;

		--The first 7 variables are semi-free variables. If they are off (FALSE),
		--then they should become activated (TRUE) randomly, but once they are
		--activated (by becoming TRUE) the system should decide when they are
		--turned off (returned back to FALSE)

		--External Buttons: Each button is either on or off (TRUE or FALSE)
	
		upF1: boolean;
		upF2: boolean;
		downF2: boolean;
		downF3: boolean;

		--Internal Buttons: Buttons inside elevator that tell the elevator where
		--to go. Each button is either on or off (TRUE or FALSE)
		
		button1: boolean;
		button2: boolean;
		button3: boolean;

	DEFINE
		-- The timer has timed out, so you should close the doors.
		timedOut := timer = 3;


	ASSIGN
		-- You continue and put your NuSMV code here

		init(car) := still;
		init(door) := closed;
		init(dest) := none;
		init(elev) := 1;
		init(mode) := goingUp;
		init(timer) := 3;

		-- Initialize the buttons
		init(upF1) := FALSE;
		init(upF2) := FALSE;
		init(downF2) := FALSE;
		init(downF3) := FALSE;
		init(button1) := FALSE;
		init(button2) := FALSE;
		init(button3) := FALSE;

		------------------------------------------------------------------
		-- Define next case for the CAR.
		------------------------------------------------------------------
		next(car) := case
			-- if the door is closed and there are no pending requests
			(door = closed) & (dest = none) : still;
			-- if the timer has not timed out
			door = open : still;
			-- If the destination is not null and the door is closed
			(dest != none) & (door = closed) : moving;
		esac;

		------------------------------------------------------------------
		-- Define next case for the DOOR.
		------------------------------------------------------------------
		next(door) := case
			-- If the timer has timed out, or the car is moving
			timedOut | (car = moving) : closed;
			-- If the car is still and there are no requests.
			(car = still) & (dest = none) : closed;
			timedOut & (car = still) : open;
		esac;

	LTLSPEC
		--  You put all the properties to be verified here