-- MAIN Module
MODULE main
	VAR
		--The state of the elevator car
		car: {still, moving};
		--The state of the elevator door
		door: {open, closed};
		--The destination where elevator will move to serve a request
		dest: {none, up1, up2, down2, down3};
		--Position of the elevator car
		elev: 1..3;
		--To remember what direction the elevator was moving once it stops
		mode: {goingUp, goingDown};

		-- How long will the elevator door be open?
		timer : 1..3;

		--The first 7 variables are semi-free variables. If they are off (FALSE),
		--then they should become activated (TRUE) randomly, but once they are
		--activated (by becoming TRUE) the system should decide when they are
		--turned off (returned back to FALSE)

		--External Buttons: Each button is either on or off (TRUE or FALSE)
	
		upF1: boolean;
		upF2: boolean;
		downF2: boolean;
		downF3: boolean;

		--Internal Buttons: Buttons inside elevator that tell the elevator where
		--to go. Each button is either on or off (TRUE or FALSE)
		
		button1: boolean;
		button2: boolean;
		button3: boolean;

	DEFINE
		-- The timer has timed out, so you should close the doors.
		-- TODO change this to 5 in the end --------------------------------------------
		timedOut := timer = 3;
		-- There is no request if all the buttons are false (not pushed).
		noReq := (upF1 = FALSE) & (upF2 = FALSE) & (downF2 = FALSE) & (downF3 = FALSE) & (button1 = FALSE) & (button2 = FALSE) & (button3 = FALSE) ;


	ASSIGN
		-- You continue and put your NuSMV code here

		init(car) := still;
		init(door) := closed;
		init(dest) := none;
		init(elev) := 1;
		init(mode) := goingUp;
		init(timer) := 3;

		-- Initialize the buttons
		init(upF1) := FALSE;
		init(upF2) := FALSE;
		init(downF2) := FALSE;
		init(downF3) := FALSE;
		init(button1) := FALSE;
		init(button2) := FALSE;
		init(button3) := FALSE;

		------------------------------------------------------------------
		-- Define next case for the CAR.
		------------------------------------------------------------------
		next(car) := case
			-- if the door is closed and there are no pending requests
			(door = closed) & (dest = none) : still;
			-- if the timer has not timed out
			door = open : still;
			-- If the destination is not null and the door is closed
			(dest != none) & (door = closed) : moving;
		esac;

		------------------------------------------------------------------
		-- Define next case for the DOOR.
		------------------------------------------------------------------
		next(door) := case
			-- If the timer has timed out, or the car is moving
			timedOut | (car = moving) : closed;
			-- If the car is still and there are no requests.
			(car = still) & (dest = none) : closed;
			timedOut & (car = still) : open;

		esac;

		------------------------------------------------------------------
		-- Define next case for the DEST.
		-- {none, up1, up2, down2, down3};
		------------------------------------------------------------------
		next(dest) := case
			(noReq = TRUE) : none;
			-- If there is a request on the 1st floor and the car is on the 2nd floor
			(upF1 = TRUE) & (mode = goingDown) & (elev = 2) & (door = closed) : up1;
			-- If upF1 is true and the car is going down from the 3rd floor, and there is no req on the 2nd floor, service 1st floor.
			(upF1 = TRUE) & (mode = goingDown) & (elev = 3) & (downF2 = FALSE) & (button2 = FALSE) & (door = closed): up1;
			-- If upF1 and downF2 are both pressed and the elevator is going down from floor 3, service floor 2 first.
			((upF1 = TRUE) & (downF2 = TRUE)) & (elev = 3) & (mode = goingDown): down2;
			-- If upF2 and downF3 are pressed and the car is going up from the first floor, serice 2nd floor first.
			((upF2 = TRUE) & (downF3 = TRUE)) & (mode = goingUp) & (elev = 1): up2;


		esac;

		------------------------------------------------------------------
		-- Define next case for the ELEV.
		------------------------------------------------------------------
		

		------------------------------------------------------------------
		-- Define next case for the MODE.
		------------------------------------------------------------------
		next(mode) := case
			-- If you are on the first floor, the only direction is up.
			(evev = 1): goingUp;
			(elev = 2) & (mode = goingUp) & ((downF3 = TRUE) | (button3 = TRUE)): goingUp;
			(elev = 2) & (mode = goingDown) & ((upF1 = TRUE) | (button1 = TRUE)): goingDown;
			-- If you are on the third floor, the only direction is down.
			(elev = 3): goingDown;
		esac;


		------------------------------------------------------------------
		-- Define next case for the TIMER.
		------------------------------------------------------------------
		next(timer) := case
			-- If you are on floor 1 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 1) & (door = open) & ((upF1 = TRUE) | (button1 = TRUE)) & !timedOut : 1;
			-- If you are on floor 2 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 2) & (door = open) & ((upF2 = TRUE) | (downF2 = TRUE) | (button2 = TRUE)) & !timedOut : 1;
			-- If you are on floor 3 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 3) & (door = open) & ((downF3 = TRUE) | (button3 = TRUE)) & !timedOut : 1;
			-- If the doors are open and the timer has not timed out, increment timer.
			(door = open) & !timedOut : timer + 1;
			-- Reset the timer after the doors have closed.
			(door = closed) : 1;
		esac;


	LTLSPEC
		--  You put all the properties to be verified here