
-- MAIN Module
MODULE main
	VAR
		--The state of the elevator car
		car: {still, moving};
		--The state of the elevator door
		door: {open, closed};
		--The destination where elevator will move to serve a request
		dest: {none, up1, up2, down2, down3};
		--Position of the elevator car
		elev: 1..3;
		--To remember what direction the elevator was moving once it stops
		mode: {goingUp, goingDown};

		-- How long will the elevator door be open?
		timer : 1..3;

		--The first 7 variables are semi-free variables. If they are off (FALSE),
		--then they should become activated (TRUE) randomly, but once they are
		--activated (by becoming TRUE) the system should decide when they are
		--turned off (returned back to FALSE)

		--External Buttons: Each button is either on or off (TRUE or FALSE)
	
		upF1: boolean;
		upF2: boolean;
		downF2: boolean;
		downF3: boolean;

		--Internal Buttons: Buttons inside elevator that tell the elevator where
		--to go. Each button is either on or off (TRUE or FALSE)
		
		button1: boolean;
		button2: boolean;
		button3: boolean;
		openButton: boolean;
		closeButton: boolean;

	DEFINE

		-- The timer has timed out, so you should close the doors.
		-- TODO change this to 5 in the end --------------------------------------------
		timedOut := timer = 3;
		-- There is no request if all the buttons are false (not pushed).
		noReq := (upF1 = FALSE) & (upF2 = FALSE) & (downF2 = FALSE) & (downF3 = FALSE) & (button1 = FALSE) & (button2 = FALSE) & (button3 = FALSE);
		-- If we are on the first floor, and it is our destination, and the mode is going up, open the doors.
		open1 := (elev = 1) & (dest = up1) & (mode = goingUp);
		-- If we are on the second floor and it is our destination, and the mode is going up, open the doors.
		open2up := (elev = 2) & (dest = up2) & (mode = goingUp);
		-- If we are on the second floor and it is our destination, and the mode is going down, open the doors.
		open2down := (elev = 2) & (dest = down2) & (mode = goingDown);
		-- If we are on the third floor and it is our destination, and the mode is going down, open the doors.
		open3 := (elev = 3) & (dest = down3) & (mode = goingDown);

	ASSIGN
		-- You continue and put your NuSMV code here

		init(car) := still; -- the car starts being still
		init(door) := closed; -- the doors start being closed
		init(dest) := none; -- there is originally no destination
		init(elev) := 1; -- initialized on the first floor
		init(mode) := goingUp; -- goingUp is the only option from the first floor
		init(timer) := 1; -- the doors are closed, so the timer is reset.

		-- Initialize the buttons
		init(upF1) := FALSE;
		init(upF2) := FALSE;
		init(downF2) := FALSE;
		init(downF3) := FALSE;
		init(button1) := FALSE;
		init(button2) := FALSE;
		init(button3) := FALSE;
		init(openButton) := FALSE;
		init(closeButton) := FALSE;

		------------------------------------------------------------------
		-- Define next case for the BUTTONS.
		------------------------------------------------------------------
			next(openButton) := case
			-- If the car is moving or the door opens, this button is false
			 (door = open): FALSE;
			 car = moving : FALSE;
			TRUE : openButton;
		esac;
		
		next(closeButton) := case
			-- If the car is moving or the door closes, this button is false
			(door = closed): FALSE;
			car = moving : FALSE;
			TRUE : closeButton ;
		esac;			
		
		next(upF1) := case
			-- Must be on the first floor and the doors must be closed in order to turn off this button.
			(elev = 1) & (door = closed) & (car = still): FALSE;
			TRUE : upF1;
		esac;

		next(upF2) := case
			-- Must be on the second floor and going up to turn off this button
			(elev = 2) & (mode = goingUp) & (door = closed) & (car = still): FALSE;
			TRUE : upF2;
		esac;

		next(downF2) := case
			-- Must be on the second floor and going down to turn off this button.
			(elev = 2) & (mode = goingDown) & (door = closed) & (car = still): FALSE;
			TRUE : downF2;
		esac;

		next(downF3) := case
			-- Must be on the third floor and the doors must be closed to turn off this button.
			(elev = 3) & (door = closed) & (car = still): FALSE;
			TRUE : downF3;
		esac;

		next(button1) := case
			(elev = 1) & (door = closed) & (car = still): FALSE;
			TRUE : button1;
		esac;

		next(button2) := case
			-- Must be on the second floor and going down an the dest must be goind down.
			(elev = 2) & (mode = goingDown) & (dest = down2) & (door = closed) & (car = still): FALSE;
			-- Must be on the second floor and going up with the dest going up.
			(elev = 2) & (mode = goingUp) & (dest = up2) & (door = closed) & (car = still): FALSE;
			TRUE: button2;
		esac;

		next(button3) := case
			(elev = 3) & (door = closed) & (car = still): FALSE;
			TRUE : button3;
		esac;

		------------------------------------------------------------------
		-- Define next case for the CAR.
		------------------------------------------------------------------
		next(car) := case
			-- if the door is closed and there are no pending requests
			(door = closed) & noReq : still;			
			-- if the timer has not timed out
			door = open : still;
			-- If the destination is not null and the door is closed
			(door = closed) & (!open1 & !open2down & !open2up & !open3) : moving;
			-- If we are at the destination, stop moving.
			(door = closed) & (open1 | open2down | open2up | open3) : still;
			TRUE : car;
		esac;

		------------------------------------------------------------------
		-- Define next case for the DOOR.
		------------------------------------------------------------------
		next(door) := case
		
			--If the closed button is pressed the doors should close
			(closeButton = TRUE)&(door = open):closed;
			
			--If the open button is pressed the doors should open if elevator is still 
			(openButton = TRUE)&(car = still)&(door = closed): open;
			
			
			
			-- If the car is moving, the doors are always closed.
			(car = moving) : closed;
			-- If the timer has timed out and the car is still, close the doors.
			timedOut & (car = still): closed;
			-- If the car is still and there are no requests, close the doors.
			(car = still) & noReq & timedOut : closed;
			-- If the car is still and it is at the floor of a request, open the doors.
			(car = still) & (open1 | open2down | open2up | open3) : open;
			TRUE : door;
		esac;

		------------------------------------------------------------------
		-- Define next case for the DEST.
		-- {none, up1, up2, down2, down3};
		------------------------------------------------------------------
		next(dest) := case
			(noReq = TRUE) : none;
			-- FIRST FLOOR DESTINATION -----------
			-- If on the second floor going down and button 1 (in or out) is true, then set dest for floor 1.
			(elev = 2) & ((upF1 = TRUE) | (button1 = TRUE)) & (mode = goingDown) & (car = still): up1;
			-- If you are on floor 3 going down, and button 1 (in or out) is pressed, and there is no req for floor 2, go to floor 1.
			(elev = 3) & ((upF1 = TRUE) | (button1 = TRUE)) & (mode = goingDown) & (downF2 = FALSE) & (button2 = FALSE) & (car = still): up1;

			-- SECOND FLOOR DESTINATION -----------
			-- If you are on floor 3 going down and button 2 (in or down out) are pressed, go to down 2.
			(elev = 3) & ((downF2 = TRUE) | (button2 = TRUE)) & (mode = goingDown) & (car = still): down2;
			-- If you are on floor 1 and going up and button 2 (in or out) is pressed, go to up 2.
			(elev = 1) & ((upF2 = TRUE) | (button2 = TRUE)) & (mode = goingUp) & (car = still): up2;

			-- THIRD FLOOR DESTINATION -----------
			-- If you are on the second floor going up and button 3 (in or out) is pressed, go to down 3.
			(elev = 2) & ((downF3 = TRUE) | (button3 = TRUE)) & (mode = goingUp) & (car = still): down3;
			-- If you are on the first floor goind up and neither of the up 2nd floor buttons are pressed, the dest is 3rd floor.
			(elev = 1) & (upF2 = FALSE) & (button2 = FALSE) & ((downF3 = TRUE) | (button3 = TRUE)) & (mode = goingUp) & (car = still): down3;

			TRUE : dest;
		esac;

		------------------------------------------------------------------
		-- Define next case for the ELEV.
		------------------------------------------------------------------
		next(elev) := case
			-- If we are on the 1st floor and we are going up, the next floor is 2.
			(elev = 1) & (mode = goingUp) & ((dest != none) & (dest != up1)) & (car = moving) : 2;
			-- If we are on 2nd floor, and going up, and destination is 3rd floor, go to floor 3.
			(elev = 2) & (mode = goingUp) & (dest = down3) & (car = moving) : 3;
			-- If we are on floor 2 and going down and the destination is 1st floor, go down to the first floor.
			(elev = 2) & (mode = goingDown) & (dest = up1) & (car = moving) : 1;
			-- If we are on the 3rd floor and we are going down, the next floor is 2.
			(elev = 3) & (mode = goingDown) & ((dest != none) & (dest != down3)) & (car = moving) : 2;
			TRUE : elev;
		esac;

		------------------------------------------------------------------
		-- Define next case for the MODE.
		------------------------------------------------------------------
		next(mode) := case
			-- If you are on the first floor, the only direction is up.
			(elev = 1): goingUp;
			(elev = 2) & (mode = goingUp) & ((downF3 = TRUE) | (button3 = TRUE)): goingUp;
			(elev = 2) & (mode = goingDown) & ((upF1 = TRUE) | (button1 = TRUE)): goingDown;
			-- If you are on the third floor, the only direction is down.
			(elev = 3): goingDown;
			TRUE : mode;
		esac;


		------------------------------------------------------------------
		-- Define next case for the TIMER.
		------------------------------------------------------------------
		next(timer) := case
			-- If you are on floor 1 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 1) & (door = open) & ((upF1 = TRUE) | (button1 = TRUE)) & !timedOut : 1;
			-- If you are on floor 2 and doors are open, pushing outside or inside buttons will reset timer.
			-- Note that this timer depends on the button pushed outside, and the mode.
			(elev = 2) & (door = open) & ((upF2 = TRUE) | (button2 = TRUE)) & (mode = goingUp) & !timedOut : 1;
			(elev = 2) & (door = open) & ((downF2 = TRUE) | (button2 = TRUE)) & (mode = goingDown) & !timedOut : 1;
			-- If you are on floor 3 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 3) & (door = open) & ((downF3 = TRUE) | (button3 = TRUE)) & !timedOut : 1;
			-- If the doors are open and the timer has not timed out, increment timer.
			(door = open) & !timedOut : timer + 1;
			-- Reset the timer after the doors have closed.
			(door = closed) : 1;
			TRUE : timer;
		esac;

------------------------------------------------------------------
-- Begin CTLSPEC
------------------------------------------------------------------
		
-- The Elevator can't move with it's doors open
CTLSPEC AG ((door = open) -> (car = still))

-- Make sure that every state is reachable. Any state that is not an initial state can't be reached unless there is a request

CTLSPEC	EF(car = still)
CTLSPEC	EF(!noReq -> (car = moving))
CTLSPEC	EF(!noReq -> (door = open))
CTLSPEC	EF(door = closed)
CTLSPEC	EF(dest = none)
CTLSPEC	EF(!noReq ->(dest = up1))
CTLSPEC	EF(!noReq ->(dest = up2))
CTLSPEC	EF(!noReq ->(dest = down2))
CTLSPEC	EF(!noReq ->(dest = down3))
CTLSPEC	EF(!noReq ->(elev = 1))
CTLSPEC	EF(!noReq ->(elev = 2))
CTLSPEC	EF(!noReq ->(elev = 3))
CTLSPEC	EF(mode = goingUp)
CTLSPEC	EF(!noReq ->(mode = goingDown))

-- If a button is pressed it will remain pressed until the request is serviced with the car stopping at the correct floor BEFORE opening its doors

CTLSPEC AG((openButton = TRUE) ->A[(openButton = TRUE) U (door = open )]);	
CTLSPEC AG((closeButton = TRUE) ->A[(closeButton = TRUE) U ( door = closed)]);		

-- A button must return to false as soon as the car stops at the correct floor BEFORE it opens the doors.
CTLSPEC AG ((button1 = TRUE & (elev = 1) & (door = open) & (car = still)) -> AX (button1 != TRUE))
CTLSPEC AG ((button2 = TRUE & (elev = 2) & (door = open) & (car = still)) -> AX (button2 != TRUE))
CTLSPEC AG ((button3 = TRUE & (elev = 3) & (door = open) & (car = still)) -> AX (button3 != TRUE))
	
CTLSPEC AG ((upF1 = TRUE & (elev = 1) & (door = open) & (car = still)) -> AX (upF1 != TRUE))
CTLSPEC AG ((upF2 = TRUE & (elev = 2) & (door = open) & (car = still) & (mode = goingUp)) -> AX (upF2 != TRUE))
CTLSPEC AG ((downF2 = TRUE & (elev = 2) & (door = open) & (car = still) & (mode = goingDown)) -> AX (downF2 != TRUE))
CTLSPEC AG ((downF3 = TRUE & (elev = 3) & (door = open) & (car = still)) -> AX (downF3 != TRUE))


-- No button can reach a state where it remains pressed forever.
CTLSPEC	(AG AF !button1) & (AG AF !button2) & (AG AF !button3) & (AG AF !upF1) & (AG AF !upF2) & (AG AF !downF2) & (AG AF !downF3) &(AG AF !closeButton) & (AG AF !openButton)

--If the elevator is not on floor 1, then it can move down
CTLSPEC AG (elev = 1 -> AX( mode != goingDown))
--If the elevator is not on floor 3, then it can move up
CTLSPEC AG (elev = 3 -> AX( mode != goingUp))

-- Make sure the elevator does not skip floors going up or down.
CTLSPEC AG  (elev = 3 & mode = goingDown) -> AX (elev = 2)
CTLSPEC AG  (elev = 1 & mode = goingUp & !noReq) -> AX (elev = 2)

CTLSPEC AG  (elev = 2 & mode = goingDown) -> AX (elev = 1)
CTLSPEC AG  (elev = 2 & mode = goingUp) -> AX (elev = 3)

------------------------------------------------------------------
-- Begin LTLSPEC
------------------------------------------------------------------

--The door will never move with it's doors open LTL
LTLSPEC G (door = open -> F(door = open U car = moving))
LTLSPEC G (door = open -> !(car = moving))

--The door should close unless a door open request is requested
LTLSPEC G (!(car = moving)&(door = open) -> F(door = closed U openButton = TRUE))

--Requests to be delivered to a particular floor are eventually serviced

LTLSPEC G((upF1 = TRUE) ->F((upF1 = TRUE) U (elev = 1 & door = closed & car = still)));
LTLSPEC G((upF2 = TRUE) ->F((upF2 = TRUE) U (elev = 2 & door = closed & car = still)));
LTLSPEC G((downF2 = TRUE) ->F((downF2 = TRUE) U (elev = 2 & door = closed & car = still)));
LTLSPEC G((downF3 = TRUE) ->F((downF3 = TRUE) U (elev = 3 & door = closed & car = still)));		
LTLSPEC G((button1 = TRUE) ->F((button1 = TRUE) U (elev = 1 & door = closed & car = still)));	
LTLSPEC G((button2 = TRUE) ->F((button2 = TRUE) U (elev = 2 & door = closed & car = still)));
LTLSPEC G((button3 = TRUE) ->F((button3 = TRUE) U (elev = 3 & door = closed & car = still)));