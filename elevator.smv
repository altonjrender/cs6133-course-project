-- MAIN Module
MODULE main
	VAR
		--The state of the elevator car
		car: {still, moving};
		--The state of the elevator door
		door: {open, closed};
		--The destination where elevator will move to serve a request
		dest: {none, up1, up2, down2, down3};
		--Position of the elevator car
		elev: 1..3;
		--To remember what direction the elevator was moving once it stops
		mode: {goingUp, goingDown};

		-- How long will the elevator door be open?
		timer : 1..3;

		--The first 7 variables are semi-free variables. If they are off (FALSE),
		--then they should become activated (TRUE) randomly, but once they are
		--activated (by becoming TRUE) the system should decide when they are
		--turned off (returned back to FALSE)

		--External Buttons: Each button is either on or off (TRUE or FALSE)
	
		upF1: boolean;
		upF2: boolean;
		downF2: boolean;
		downF3: boolean;

		--Internal Buttons: Buttons inside elevator that tell the elevator where
		--to go. Each button is either on or off (TRUE or FALSE)
		
		button1: boolean;
		button2: boolean;
		button3: boolean;

	DEFINE
		-- The timer has timed out, so you should close the doors.
		-- TODO change this to 5 in the end --------------------------------------------
		timedOut := timer = 3;
		-- There is no request if all the buttons are false (not pushed).
		noReq := (upF1 = FALSE) & (upF2 = FALSE) & (downF2 = FALSE) & (downF3 = FALSE) & (button1 = FALSE) & (button2 = FALSE) & (button3 = FALSE) ;


	ASSIGN
		-- You continue and put your NuSMV code here

		init(car) := still;
		init(door) := closed;
		init(dest) := none;
		init(elev) := 1;
		init(mode) := goingUp;
		init(timer) := 3;

		-- Initialize the buttons
		init(upF1) := FALSE;
		init(upF2) := FALSE;
		init(downF2) := FALSE;
		init(downF3) := FALSE;
		init(button1) := FALSE;
		init(button2) := FALSE;
		init(button3) := FALSE;

		------------------------------------------------------------------
		-- Define next case for the BUTTONS.
		------------------------------------------------------------------
		next(upF1) := case
			elev = 1: FALSE;
			TRUE : upF1;
		esac;

		next(upF2) := case
			-- Must be on the second floor and going up to turn off  this button
			(elev = 2) & (mode = goingUp): FALSE;
			TRUE : upF2;
		esac;

		next(downF2) := case
			-- Must be on the second floor and going down to turn off this button.
			(elev = 2) & (mode = goingDown): FALSE;
			TRUE : downF2;
		esac;

		next(downF3) := case
			elev = 3: FALSE;
			TRUE : downF3;
		esac;

		next(button1) := case
			elev = 1: FALSE;
			TRUE : button1;
		esac;

		next(button2) := case
			-- Must be on the second floor and going down an the dest must be goind down.
			(elev = 2) & (mode = goingDown) & (dest = down2): FALSE;
			-- Must be on the second floor and going up with the dest going up.
			(elev = 2) & (mode = goingUp) & (dest = up2): FALSE;
			TRUE: button2;
		esac;

		next(button3) := case
			elev = 3: FALSE;
			TRUE : button3;
		esac;

		------------------------------------------------------------------
		-- Define next case for the CAR.
		------------------------------------------------------------------
		next(car) := case
			-- if the door is closed and there are no pending requests
			(door = closed) & (dest = none) : still;
			-- if the timer has not timed out
			door = open : still;
			-- If the destination is not null and the door is closed
			(dest != none) & (door = closed) : moving;
			TRUE : car;
		esac;

		------------------------------------------------------------------
		-- Define next case for the DOOR.
		------------------------------------------------------------------
		next(door) := case
			-- If the timer has timed out, or the car is moving
			timedOut | (car = moving) : closed;
			-- If the car is still and there are no requests.
			(car = still) & (dest = none) : closed;
			timedOut & (car = still) : open;
			TRUE : door;
		esac;

		------------------------------------------------------------------
		-- Define next case for the DEST.
		-- {none, up1, up2, down2, down3};
		------------------------------------------------------------------
		next(dest) := case
			(noReq = TRUE) : none;
			-- FIRST FLOOR DESTINATION -----------
			-- If on the second floor going down and button 1 (in or out) is true, then set dest for floor 1.
			(elev = 2) & ((upF1 = TRUE) | (button1 = TRUE)) & (mode = goingDown) & (car = still): up1;
			-- If you are on floor 3 going down, and button 1 (in or out) is pressed, and there is no req for floor 2, go to floor 1.
			(elev = 3) & ((upF1 = TRUE) | (button1 = TRUE)) & (mode = goingDown) & (downF2 = FALSE) & (button2 = FALSE) & (car = still): up1;

			-- SECOND FLOOR DESTINATION -----------
			-- If you are on floor 3 going down and button 2 (in or down out) are pressed, go to down 2.
			(elev = 3) & ((downF2 = TRUE) | (button2 = TRUE)) & (mode = goingDown) & (car = still): down2;
			-- If you are on floor 1 and going up and button 2 (in or out) is pressed, go to up 2.
			(elev = 1) & ((upF2 = TRUE) | (button2 = TRUE)) & (mode = goingUp) & (car = still): up2;

			-- THIRD FLOOR DESTINATION -----------
			-- If you are on the second floor going up and button 3 (in or out) is pressed, go to down 3.
			(elev = 2) & ((downF3 = TRUE) | (button3 = TRUE)) & (mode = goingUp) & (car = still): down3;
			-- If you are on the first floor goind up and neither of the up 2nd floor buttons are pressed, the dest is 3rd floor.
			(elev = 1) & (upF2 = FALSE) & (button2 = FALSE) & ((downF3 = TRUE) | (button3 = TRUE)) & (mode = goingUp) & (car = still): down3;

			TRUE : dest;
		esac;

		------------------------------------------------------------------
		-- Define next case for the ELEV.
		------------------------------------------------------------------
		next(elev) := case
			-- If we are on the 1st floor and we are going up, the next floor is 2.
			(elev = 1) & (mode = goingUp) & ((dest != none) | (dest != up1)): 2;
			-- If we are on 2nd floor, and going up, and destination is 3rd floor, go to floor 3.
			(elev = 2) & (mode = goingUp) & (dest = down3): 3;
			-- If we are on floor 2 and going down and the destination is 1st floor, go down to the first floor.
			(elev = 2) & (mode = goingDown) & (dest = up1): 1;
			-- If we are on the 3rd floor and we are going down, the next floor is 2.
			(elev = 3) & (mode = goingDown) & ((dest != none) | (dest != down3)): 2;
			TRUE : elev;
		esac;

		------------------------------------------------------------------
		-- Define next case for the MODE.
		------------------------------------------------------------------
		next(mode) := case
			-- If you are on the first floor, the only direction is up.
			(elev = 1): goingUp;
			(elev = 2) & (mode = goingUp) & ((downF3 = TRUE) | (button3 = TRUE)): goingUp;
			(elev = 2) & (mode = goingDown) & ((upF1 = TRUE) | (button1 = TRUE)): goingDown;
			-- If you are on the third floor, the only direction is down.
			(elev = 3): goingDown;
			TRUE : mode;
		esac;


		------------------------------------------------------------------
		-- Define next case for the TIMER.
		------------------------------------------------------------------
		next(timer) := case
			-- If you are on floor 1 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 1) & (door = open) & ((upF1 = TRUE) | (button1 = TRUE)) & !timedOut : 1;
			-- If you are on floor 2 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 2) & (door = open) & ((upF2 = TRUE) | (downF2 = TRUE) | (button2 = TRUE)) & !timedOut : 1;
			-- If you are on floor 3 and doors are open, pushing outside or inside buttons will reset timer.
			(elev = 3) & (door = open) & ((downF3 = TRUE) | (button3 = TRUE)) & !timedOut : 1;
			-- If the doors are open and the timer has not timed out, increment timer.
			(door = open) & !timedOut : timer + 1;
			-- Reset the timer after the doors have closed.
			(door = closed) : 1;
			TRUE : timer;
		esac;

-- Make sure that every state is reachable.
CTLSPEC	EF(car = still)
CTLSPEC	EF(car = moving)
CTLSPEC	EF(door = open)
CTLSPEC	EF(door = closed)
CTLSPEC	EF(dest = none)
CTLSPEC	EF(dest = up1)
CTLSPEC	EF(dest = up2)
CTLSPEC	EF(dest = down2)
CTLSPEC	EF(dest = down3)
CTLSPEC	EF(elev = 1)
CTLSPEC	EF(elev = 2)
CTLSPEC	EF(elev = 3)
CTLSPEC	EF(mode = goingUp)
CTLSPEC	EF(mode = goingDown)
-- No button can reach a state where it remains pressed forever.
CTLSPEC	(AG AF !button1) & (AG AF !button2) & (AG AF !button3) & (AG AF !upF1) & (AG AF !upF2) & (AG AF !downF2) & (AG AF !downF3)

--LTLSPEC
		--  You put all the properties to be verified here